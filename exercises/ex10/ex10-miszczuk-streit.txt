-- Exercise 10 
-- Miszczuk, Streit

--Aufgabe 1
1. Nein
2. nicht zwingend, ist jedoch möglich
3. 0 oder mehr
4. Ja, ein Redaktreur ist zwingend ein Angestellter und ein Angestellter kann mehrere Rollen haben, also ist es auch möglich, dass ein Redakteur auch ein Designer ist und somit ein Dokument designen kann. 
5. Ja, es gibt keine Einschränkung.



-- Aufhabe 2 - Kino
DROP TABLE IF EXISTS film;
CREATE TABLE film (
filmID INT NOT NULL,
titel TEXT NOT NULL,
regisseurname TEXT NOT NULL,
CONSTRAINT film_pkey
PRIMARY KEY (filmID)
);

DROP TABLE IF EXISTS sprache;
CREATE TABLE sprache(
spracheID INT NOT NULL,
sprachschluessel TEXT NOT NULL,
sprache TEXT NOT NULL,
CONSTRAINT sprache_pkey
PRIMARY KEY (spracheID)
);

DROP TABLE IF EXISTS adresse;
CREATE TABLE adresse (
adresseID int NOT NULL,
adresszeile1 TEXT NOT NULL,
adresszeile2 TEXT,
strasse TEXT NOT NULL,
hausnummer TEXT NOT NULL,
plz TEXT NOT NULL, 
ort TEXT NOT NULL,
CONSTRAINT adresse_pkey
PRIMARY KEY (adresseID)
);

DROP TABLE IF EXISTS kino;
CREATE TABLE kino (
kinoID INT NOT NULL,
adresseID INT NOT NULL,
kinoname TEXT NOT NULL,
telefonnummer TEXT NOT NULL,
CONSTRAINT kino_pkey
PRIMARY KEY (kinoID),
CONSTRAINT kino_adresse_fkey
FOREIGN KEY (adresseID)
REFERENCES adresse (adresseID)
);

DROP TABLE IF EXISTS person;
CREATE TABLE person (
personID INT NOT NULL,
adresseID INT NOT NULL,
cinecardNr INT NOT NULL, 
first_name TEXT NOT NULL,
last_name TEXT NOT NULL,
CONSTRAINT person_pkey
PRIMARY KEY (personID),
CONSTRAINT person_cinecard_fkey
FOREIGN KEY (adresseID)
REFERENCES adresse (adresseID)
);

DROP TABLE IF EXISTS vorstellung;
CREATE TABLE vorstellung (
vorstellungID INT NOT NULL,
kinoID INT NOT NULL,
filmID INT NOT NULL,
spracheID INT NOT NULL,
untertitel_spracheID INT NOT NULL,
datum TEXT NOT NULL,
startzeit TEXT NOT NULL,
endzeit TEXT NOT NULL,
CONSTRAINT vorstellung_pkey
PRIMARY KEY (vorstellungID),
CONSTRAINT vorstellung_kino_fkey
FOREIGN KEY (kinoID)
REFERENCES kino (kinoID),
CONSTRAINT vorstellung_film_fkey
FOREIGN KEY (filmID)
REFERENCES film (filmID),
CONSTRAINT vorstellung_sprache_fkey
FOREIGN KEY (spracheID)
REFERENCES sprache (spracheID),
CONSTRAINT vorstellung_untertitel_sprache_fkey
FOREIGN KEY (untertitel_spracheID)
REFERENCES sprache (spracheID)
);

DROP TABLE IF EXISTS besuch;
CREATE TABLE besuch (
besuchID INT NOT NULL,
personID INT NOT NULL,
vorstellungID INT NOT NULL, 
sitzplatznummer INT NOT NULL,
CONSTRAINT besuch_pkey
PRIMARY KEY (besuchID), 
CONSTRAINT besuch_person_fkey
FOREIGN KEY (personID)
REFERENCES person (personID),
CONSTRAINT besuch_vorstellung_fkey
FOREIGN KEY (vorstellungID)
REFERENCES vorstellung (vorstellungID)
);

-- Aufhabe 3 - Handelsfirma
-- 3.2
DROP TABLE IF EXISTS kunde;
CREATE TABLE kunde(
kundeID INT NOT NULL,
holdingID INT,
firmaID INT,
typ TEXT,
kundenname TEXT,
CONSTRAINT kunde_pkey
PRIMARY KEY (kundeID),
CONSTRAINT kunde_holding_fkey
FOREIGN KEY (holdingID)
REFERENCES kunde (kundeID),
CONSTRAINT kunde_firma_fkey
FOREIGN KEY (firmaID)
REFERENCES kunde (kundeID)
);

DROP TABLE IF EXISTS produkt;
CREATE TABLE produkt (
produktID INT NOT NULL,
produktname TEXT NOT NULL,
CONSTRAINT produkt_pkey
PRIMARY KEY (produktID)
);

DROP TABLE IF EXISTS verkauf;
CREATE TABLE verkauf (
verkaufID INT NOT NULL,
kundeID INT NOT NULL,
produktID INT NOT NULL,
preis DECIMAL(10,2) NOT NULL,
menge INT NOT NULL,
lieferdatum TEXT NOT NULL,
CONSTRAINT verkauf_pkey
PRIMARY KEY (verkaufID),
CONSTRAINT verkauf_kunde_fkey
FOREIGN KEY (kundeID)
REFERENCES kunde (kundeID),
CONSTRAINT verkauf_produkt_fkey
FOREIGN KEY (produktID)
REFERENCES produkt (produktID)
);


-- Aufhabe 3 - Handelsfirma
-- 3.3
-- a
SELECT produktname FROM produkt AS p
JOIN verkauf AS v
    ON v.produktID = p.produktID
WHERE v.lieferdatum < "2005-12-01"
GROUP BY produktID;

-- b
SELECT produktname FROM produkt AS p
JOIN verkauf AS v
    ON v.produktID = p.produktID
JOIN kunde AS k
    ON v.kundeID = k.kundeID
WHERE k.kundenname = "ABC Holding"
GROUP BY produktID;

-- c
SELECT produktname, filialen.kundenname, firmen.kundenname, holding.kundenname FROM produkt AS p
JOIN verkauf AS v
    ON v.produktID = p.produktID
JOIN kunde AS holding
    ON v.kundeID = holding.kundeID
JOIN kunde AS firmen
    ON firmen.holdingID = k.kundeID
JOIN kunde AS filialen
    ON filialen.firmaID = k.kundeID
WHERE k.kundenname = "ABC Holding";